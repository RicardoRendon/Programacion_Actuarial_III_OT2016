str(lm)
str(ls)
x <- rnorm(100)
str(x)
summary(x)
f <- gl(40,10)
f
str(f)
summary(f)
str(airquality)
m <- matrix(rnorm(100),10,10)
m
str(m)
s <- split(airquality, airquality$Month)
str(s)
x <- rnorm(10)
x
y <- rnorm(10,50,0)
y
y <- rnorm(10,50,5)
y
summary(x)
summary(y)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
normal1 <- rnorm(10000)
normal2 <- rnorm(10000,10,5)
hist(normal1)
summary(normal1)
hist(normal2)
summary(normal2)
rpois(10,1)
poisson1 <- rpois(10000,1)
poisson2 <- rpois(10000,10)
hist(poisson1)
hist(poisson2)
ppois(2,2)
ppois(4,2)
ppois(6,2)
hist(rpois(10000,2))
ppois(0,2)
lambda=2
for( i in 1:10){
print(ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppos(10, lambda)
lambda=2
probs[0] <- ppois(0,lambda)
for( i in 1:10){
probs[i-1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppos(10, lambda)
probs[0] <- ppois(0,lambda)
probs[0] <- vector(mode="numeric")
probs <- vector(mode="numeric")
probs[0] <- ppois(0,lambda)
for( i in 1:10){
probs[i-1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppos(10, lambda)
for( i in 1:10){
probs[i-1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppois(10, lambda)
for( i in 1:10){
probs[i] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppois(10, lambda)
lambda=2
probs <- vector(mode="numeric")
probs[0] <- ppois(0,lambda)
for( i in 1:10){
probs[i] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppois(10, lambda)
probs
lambda=2
probs <- vector(mode="numeric")
probs[1] <- ppois(0,lambda)
for( i in 1:10){
probs[i+1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
1- ppois(10, lambda)
probs
for(i in 0:12){print(dpois(i,2))}
lambda=2
probs <- vector(mode="numeric")
probs[1] <- ppois(0,lambda)
for( i in 1:10){
probs[i+1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
probs[12] <- 1- ppois(10, lambda)
probs*100
lambda=2
probs <- vector(mode="numeric")
probs[1] <- ppois(0,lambda)
for( i in 1:10){
probs[i+1] <- (ppois(i,lambda)- ppois(i-1, lambda))
}
probs[12] <- 1- ppois(10, lambda)
probs
runif(1000,10,20)
hist(runif(1000,10,20))
hist(runif(10000,10,20))
hist(runif(100000,10,20))
hist(runif(1000000,10,20))
hist(runif(100000000,10,20))
hist(runif(200000000,10,20))
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
z <- 0.5+2*x
plot(x,z)
plot(z,y)
library(swirl)
swirl()
0
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100, 0, .5)
y <- 0.5 + 2 * x + e
plot(x, y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100, 0, .0005)
y <- 0.5 + 2 * x + e
plot(x, y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)
?binom
?rbinom
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
plot(x, y)
summary(y)
?plot
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="dark red"
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="dark red")
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="red")
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 6 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="dark red")
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 6 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="blue")
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,1)
y <- 0.5 + 6 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="blue")
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,1)
y <- 0.5 + 6 * x + e
summary(y)
plot(x, y, main = "Modelo Lineal", col="yellow")
plot(x,y, main="Modelo Poisson", col="forestgreen")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y, main="Modelo Poisson", col="forestgreen")
plot(x,y, main="Modelo Poisson", col="dark green")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y, main="Modelo Poisson", col="dark green")
library(swirl)
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
x
boring_function(x){
x
}
boring_function(x){
x
}
submit()
boring_function(x) {
x
}
boring_function(x) {
x
submit()
boring_function(x) {
x
}
submit()
submit()
boring_function(x) {x}
submit()
submit()
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5).
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8,4,0))
evaluate(x, c(8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function(x), c(8,4,0))
evaluate(boring_function, (8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function, c(8,4,0))
evaluate(boring_function(c(8,4,0)))
evaluate(boring_function(8)
evaluate(boring_function(8))
evaluate(function(x),c(8,4,0))
evaluate(function(x){1},c(8,4,0))
info()
skip()
evaluate(function(x){x[1]}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
submit()
mad_libs()
submit()
%p%(%p%("I","love),"R!")
"%p%"(%p%("I","love),"R!")
skip()
0
x <- 1:4
y<- 2
x+y
x <- c(17,14,4,5,13,12,10)
x[x>4]
airquality
ncol(airquality$Ozone,na.rm)
ncol(airquality$Ozone)
nrow(airquality$Ozone)
nrow(airquality$Ozone)
?nrow
x <- airquality(,1)
x <- airquality
x <- airquality(,1)
x <- airquality(,i)
evaluate(function(x){x[1]}, c(8, 4, 0))
summary(airquality)
airquality[[Ozone>31]]
airquality[[$Ozone>31]]
airquality[[airquality$Ozone>31]]
y <-airquality[[airquality$Ozone>31]]
airquality[[airquality$Ozone>31]]<-y
airquality[[[airquality$Ozone]>31]]
airquality[[airquality$Ozone]>31]
airquality
data(airquality)
subset(airquality, Temp>90,select = (Ozone,Temp))
myset<-data[data$Ozone>31 & data$Temp>90,]
data(airquality)
myset<-data[data$Ozone>31 & data$Temp>90,]
data("airquality")
myset<-data[data$Ozone>31 & data$Temp>90,]
myset<-airquality[airquality$Ozone>31 & airquality$Temp>90,]
myset
summary(myset)
myset<-airquality[airquality$Month==6]
myset<-airquality[airquality$Month=6]
myset<-airquality[airquality$Month==6,]
myset
summary(myset)
summary(myset,na.rm)
myset<-airquality[airquality$Month==5,]
summary(myset,na.rm)
myset
summary(airquality)
airquality
myset<-airquality[airquality$Temp>90,]
myset
summary(myset)
myset<-airquality[airquality$Temp>=90,]
summary(myset)
myset<-airquality[airquality$Ozone>=30,]
summary(myset)
rankingcompleto <- function(resultado, num = "mejor") {
setwd("C:/Users/Pablo Rendon/Documents/GitHub/Programacion_Actuarial_III_OT2016")
#Lectura de datos
data<- read.csv("outcome-of-care-measures.csv")
s <- numeric()
#Validación de datos
if (resultado == "ataque"){
columna <- 11
}  else if (resultado == "falla"){
columna <- 17
}   else if (resultado == "neumonia") {
columna <- 23
}    else {
stop("resultado inválido")
}
data[,2] <- as.character(data[, 2])
St <- levels(data$State)
n <- length(St)
for(i in 1:n) {
EstadoI <- data[St[i] == data$State,]
co1 <- EstadoI[, columna]
or <- EstadoI[order(co1, na.last = NA), ]
primero <- or[1,2]
ultimo <- or[nrow(or),2]
if(num == "mejor"){
numm <- primero
}else if(num == "peor"){
numm <- ultimo
}else if (is.numeric(num)==TRUE){
numm <- or[num, 2]
} else{
stop("num no es número")
}
Hosp <- c(numm, St[i])
s <- append(s,Hosp)
}
m <- matrix(s,n,2,byrow = T)
colnames(m) <- c("Hospital", "Estado")
rownames(m)<- St
DATOS <- data.frame(m)
DATOS
}
head(rankingcompleto("ataque", 20), 10)
tail(rankingcompleto("neumonia", "peor"), 3)
rankhospital <- function(estado,resultado,num="best"){
# Lectura de datos
setwd("C:/Users/Pablo Rendon/Documents/GitHub/Programacion_Actuarial_III_OT2016")
datos <- read.csv("outcome-of-care-measures.csv",na.strings = c("Not Available"),colClasses=c("character"))
# Revisión de la validez de estado y resultado
resultados <- c("falla","neumonía", "ataque")
ranking2 <- vector(mode="numeric")
estados <- datos[ , 7]
if ((estado %in% estados) == FALSE) {
stop(print("estado inválido"))
}  else if ((resultado %in% resultados)==FALSE){
stop(print("resultado inválido"))
}
data <- subset(datos,State == estado)
if (resultado == "ataque") {
columna <- 11
}   else if (resultado == "falla") {
columna <- 17
}   else {
columna <- 23
}
if (num=="mejor"){
num <- 1
}else if (num=="peor"){
faltantes <- is.na(data[,columna])
num <- nrow(data)- sum(faltantes)
} else if(is.numeric(num)==FALSE){
stop("num no es número")
}
nombrehospital <-  c(as.character(data[,2]))
tasa <-c(as.numeric(data[,columna]))
orden <- as.integer(rank(tasa))
matriz <- rbind(nombrehospital,tasa,orden)
filasconsideradas <- as.numeric(which(matriz[3,] == num))
largo <- length(filasconsideradas)
maximo <- as.integer(max(orden))
if (maximo<num){
ranking <- c(Na)
} else{
if (largo>1){
for (i in 1:largo){
ranking2[i] <- matriz[1,filasconsideradas[i]]
ranking<- min(ranking2)
}
}   else if (largo ==1){
ranking <- matriz[1,filasconsideradas]
} else{
for (i in 1:largo){
filasconsideradas <- as.numeric(which(matriz[3,] == num-1))
ranking2[i] <- matriz[1,filasconsideradas[i]]
ranking <- max(ranking2)
}
}
}
ranking
}
rankhospital("AL", "ataque", 1)
rankhospital("AL", "ataque", "mejor")
rankhospital("TX", "falla", 4)
rankhospital("MD", "ataque", "peor")
mejor <- function(estado, resultado){
# Lectura de datos
setwd("C:/Users/Pablo Rendon/Documents/GitHub/Programacion_Actuarial_III_OT2016")
datos <- read.csv("outcome-of-care-measures.csv",na.strings = c("Not Available"))
# Revisión de la validez de estado y resultado
resultados <- c("falla","neumonía", "ataque")
estados <- datos[ , 7]
if ((estado %in% estados) == FALSE) {
stop(print("estado inválido"))
} else if ((resultado %in% resultados)==FALSE){
stop(print("resultado inválido"))
}
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
data <- subset(datos, State == estado)
if (resultado == "ataque") {
columna <- 11
}
else if (resultado == "falla") {
columna <- 17
}
else {
columna <- 23
}
datosrequeridos <- as.numeric(data[,columna])
bad <- is.na(datosrequeridos)
desired_data <- data[!bad,]
columns_considered <- as.numeric(desired_data[,columna])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <-as.vector(desired_data[desired_rows,2])
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}else {
desired_hospitals
}
}
mejor("MD", "ataque")
mejor("TX", "falla")
mejor("MD", "neumonía")
mejor("TX", "ataque")
mejor("NY", "atakue")
head(rankingcompleto("ataque", 20), 10)
tail(rankingcompleto("neumonia", "peor"), 3)
mejor("TX","ataque")
mejor("TX","falla")
mejor("NY","neumonia")
mejor("NY","neumonía")
mejor("AL","falla")
rankhospital("MN","ataque",6)
rankhospital("IN","fallo",8)
rankhospital("IN","falla",8)
rankhospital("PP","falla",8)
rankingcompleto("falla",5)
rankingcompleto("ataque",5)
mejor("OK","neumonia")
mejor("OK","neumonía")
rankingcompleto("neumonía","peor")
rankingcompleto("neumonia","peor")
rankingcompleto("neumonía","peor")
rankingcompleto("falla","7")
rankingcompleto("falla",7)
rankhospital("FL","neumonía",7)
rankhospital("FL","neumonía","peor")
rankhospital("CA","ataque","peor")
